This document contains the PrivacyLens deployment guide and the general manual.

PrivacyLens is an extension for the Shibboleth Identity Provider 2.x. It allows to make users authenticating at an Identity Provider to accept terms of use and to give attribute release consent. "More information about the concept of PrivacyLens":https://github.com/cmu-cylab-privacylens/PrivacyLens.

Notes about this guide:
* This guide assumes that PrivacyLens will be installed on a Linux system. It's also possible to install it on a different operating system, like Windows. In this case, you may need to adapt some paths and commands accordingly.
* The guide shows paths and commands using variables like, e.g, @$IDP_INSTALL$@, @$_IDP_HOME$@ or @$PLENS_INSTALL$@. You need to substitute these variables by the real paths, except where it is explicitly stated that you don't need to substitute them.

{toc}

h1. Assumptions

* The "Shibboleth Identity Provider":http://shibboleth.net/ is unpacked at @$IDP_INSTALL$@ (e.g., @/usr/local/src/shibboleth-identity-provider-#version#@).
* The Shibboleth Identity Provider is installed at @$IDP_HOME$@ (e.g., @/opt/shibboleth-idp@).
* "PrivacyLens":https://github.com/cmu-cylab-privacylens/PrivacyLens is built and its zipfile unpacked at @$PLENS_INSTALL$@ (e.g., @/usr/local/src/PrivacyLens-#version#@).

h1. 1 Installation

h2. 1.1 Prerequisites

* Shibboleth Identity Provider 2.3 or greater.
* Database which supports JDBC(Java Database Connectivity).


h2. 1.2 Library Installation

If building from source, unpack the sources and build them with Maven
(mvn install) to obtain the PrivacyLens zipfile.

Copying the libraries to the IdPs library directory:

* @cp $PLENS_INSTALL$/lib/*.jar $IDP_INSTALL$/lib@
* @cp $PLENS_INSTALL$/lib/jdbc/*.jar $IDP_INSTALL$/lib@
* Provide the JDBC connector for your database to the classpath of the IdP. You might use one of the provided MySQL or HSQL JDBC connector: <br /> @cp $PLENS_INSTALL$/lib/jdbc/optional/#jdbc-connector#.jar $IDP_INSTALL$/lib@

bq(note). Assure that only one version of each library is present in @$IDP_INSTALL$/lib@.

h2. 1.3 Configuration Template

Copying the configuration template to the IdPs configuration directory:

* @cp@ "(file)$PLENS_INSTALL$/manual/configuration/PrivacyLens.properties":configuration/PrivacyLens.properties @$IDP_HOME$/conf@
* @cp@ "(file)$PLENS_INSTALL$/manual/configuration/PrivacyLens.xml":configuration/PrivacyLens.xml @$IDP_HOME$/conf@

h2. 1.4 Webapp files

Copying of the web application files like the JSP(Java Server Pages)s, CSS(Cascading Style Sheet) files and images to the IdPs webapp directory:

* @mkdir $IDP_INSTALL$/src/main/webapp/PrivacyLens@
* @cp $PLENS_INSTALL$/webapp/* $IDP_INSTALL$/src/main/webapp/PrivacyLens@

h2. 1.5 Database Preparation

bq(note). The following database parameters are examples. Adapt the values as required. Especially, choose a secure password.

* Create a database with the name "PrivacyLens".
* Create a database user with the username "PrivacyLens" and password "secret".
* Grant @INSERT, SELECT, UPDATE, DELETE@ rights for the user.
* Create the initial table structures using the schemas:
** "(file)$PLENS_INSTALL$/manual/storage/terms-of-use-schema.sql":storage/terms-of-use-schema.sql.
** "(file)$PLENS_INSTALL$/manual/storage/attribute-release-schema.sql":storage/attribute-release-schema.sql.

h1. 2 Basic Deployment

h2. 2.1 Web Application Deployment Descriptor

Extend the IdP web application deployment descriptor (@$IDP_INSTALL$/src/main/webapp/WEB-INF/web.xml@). Adapt your existing file as shown below.
* Add @$IDP_HOME$/conf/PrivacyLens.xml@ to the @contextConfigLocation@ context parameter. Keep the @$IDP_HOME$@ variables. They will be replaced during the re-deployment of the IdP in a later step.
* Add the required filters and servlets as shown.

bc.. 

<web-app ...>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>$IDP_HOME$/conf/internal.xml; $IDP_HOME$/conf/service.xml; $IDP_HOME$/conf/PrivacyLens.xml</param-value>
    </context-param>

    <!-- IdP Listeners, Filters and Servlets -->
    <!-- ...                                 -->
    
    
    <!-- PrivacyLens Filter and Servlets -->
    
    <filter>
        <filter-name>PrivacyLens</filter-name>
        <filter-class>cmu.edu.ece.PrivacyLens.Intercepter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>PrivacyLens</filter-name>
        <url-pattern>/profile/Shibboleth/SSO</url-pattern>
        <url-pattern>/profile/SAML1/SOAP/AttributeQuery</url-pattern>
        <url-pattern>/profile/SAML1/SOAP/ArtifactResolution</url-pattern>
        <url-pattern>/profile/SAML2/POST/SSO</url-pattern>
        <url-pattern>/profile/SAML2/POST-SimpleSign/SSO</url-pattern>
        <url-pattern>/profile/SAML2/Redirect/SSO</url-pattern>
        <url-pattern>/profile/SAML2/Unsolicited/SSO</url-pattern>
        <url-pattern>/Authn/UserPassword</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>PrivacyLens - Terms Of Use</servlet-name>
        <servlet-class>ch.SWITCH.aai.uApprove.tou.ToUServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>PrivacyLens - Terms Of Use</servlet-name>
        <url-pattern>/PrivacyLens/TermsOfUse</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>PrivacyLens - Attribute Release</servlet-name>
        <servlet-class>edu.cmu.ece.PrivacyLens.ar.AttributeReleaseServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>PrivacyLens - Attribute Release</servlet-name>
        <url-pattern>/PrivacyLens/AttributeRelease</url-pattern>
    </servlet-mapping>

<servlet>
<servlet-name>PrivacyLens - AR Admin</servlet-name>
<servlet-class>edu.cmu.ece.PrivacyLens.ar.AdminServlet</servlet-class>
</servlet>

<servlet-mapping>
<servlet-name>PrivacyLens - AR Admin</servlet-name>
<url-pattern>/PrivacyLens/AdminServlet</url-pattern>
</servlet-mapping>

<servlet>
<servlet-name>PrivacyLens - AR AJAX</servlet-name>
<servlet-class>edu.cmu.ece.PrivacyLens.ar.AttributeReleaseAjaxServlet</servlet-class>
</servlet>

<servlet-mapping>
<servlet-name>PrivacyLens - AR AJAX</servlet-name>
<url-pattern>/PrivacyLens/AttributeReleaseAjaxServlet</url-pattern>
</servlet-mapping>

<servlet>
<servlet-name>PrivacyLens - Debug</servlet-name>
<servlet-class>edu.cmu.ece.PrivacyLens.DebugViewServlet</servlet-class>
</servlet>

<servlet-mapping>
<servlet-name>PrivacyLens - Debug</servlet-name>
<url-pattern>/PrivacyLens/DebugView</url-pattern>
</servlet-mapping>

</web-app>
h2. 2.2 Custom Configuration

In @$IDP_HOME$/conf/PrivacyLens.xml@ change:

bc. 
<context:property-placeholder location="classpath:/configuration/PrivacyLens.properties" />

to:

bc. 
<context:property-placeholder location="file:$IDP_HOME$/conf/PrivacyLens.properties" />

Replace the variable $IDP_HOME$ by the correct path, e.g. @/opt/shibboleth-idp@ (so that the whole value looks like @file:/opt/shibboleth-idp/conf/PrivacyLens.properties@ for example).

Customize @$IDP_HOME$/conf/PrivacyLens.properties@ according your database environment and required features. See inline documentation of "PrivacyLens.properties":configuration/PrivacyLens.properties for configuration options.

In case you enable the 'Terms of Use' module (disabled by default), you need to provide an appropriate text
suitable for your organization.

An example 'Terms Of Use' HTML file can be found in @$PLENS_INSTALL$/manual/examples/terms-of-use.html@.

* Copy @$PLENS_INSTALL$/manual/examples/terms-of-use.html@ to @$IDP_HOME$/conf/terms-of-use.html@.

bc. cp $PLENS_INSTALL$/manual/examples/terms-of-use.html $IDP_HOME$/conf/terms-of-use.html

* Adapt @$IDP_HOME$/conf/terms-of-use.html@ as required.
* Adapt the value of @tou.resource@ in @$IDP_HOME$/conf/PrivacyLens.properties@ accordingly.

bc. tou.resource = file:$IDP_HOME$/conf/terms-of-use.html

h2. 2.3 Custom Templates

In case you want to customize the templates, follow section "Custom View Templates":#CustomViewTemplates.

At least, you should copy your organization's logo to the file @$IDP_INSTALL$/src/main/webapp/PrivacyLens/logo.png@, since a placeholder logo is installed by default.
You may also want to put your federation's logo to the file @$IDP_INSTALL$/src/main/webapp/PrivacyLens/federation-logo.png@ (which is an empty placeholder logo by default).
_(For the SWITCHaai federation, the logo is available at "http://www.switch.ch/aai/design/images/switchaai-logo.png":http://www.switch.ch/aai/design/images/switchaai-logo.png.)_

h2. 2.4 Deployment

To activate PrivacyLens the IdP must be re-deployed:

bc. cd $IDP_INSTALL$
./install.sh

You also need to restart your Java web application server (e.g. Tomcat or Jetty).

h1. 3 Upgrade 

There are different update procedures depending on the version that is updated.

h2. 3.1 Upgrade from uApprove < 2.3

bq(warning). If your upgrading from uApprove < 2.3 you have to completly remove this old version first and perform a clean install.
Please have a look at the "installation instructions":#a1Installation above for further information on how to install PrivacyLens.

* Legacy uApprove (< 2.3) deployment: Please remove it.
* Configuration files: Please use the new configuration file and tailor them to your needs. Note: The new ToU is an HTML file, which you can customize, just copy the content from your lecacy ToU XML to a plain HTML file.
* JSP(JavaServer Pages): Please use the new provided JSP files. If you use "Reset Attribute Release Consent":#a4.1ResetAttributeReleaseConsent, please adjust your @login.jsp@.
* Database Migration: It is possible to migrate ToU acceptance and attribute release consent data using the "provided data migration script":#DatabaseMigration.

bq(note). If _Terms Of Use Content Comparison_ and/or _Attribute Value Comparison_ feature will be used,
the lecacy database entries can not be used and must not be migrated.

h3. Database Migration

Migrate lecacy database to the new database:

bc. 
java -cp "$PLENS_INSTALL$/scripts/lib/*.jar:$PLENS_INSTALL$/lib/jdbc/optional/*.jar" groovy.ui.GroovyMain \
  $PLENS_INSTALL$/scripts/StorageMigration.groovy /opt/PrivacyLens/conf/database.properties $IDP_HOME$/conf/PrivacyLens.properties

h2. 3.2 Upgrade from uApprove 2.3 to 2.4

* In version 2.4 "@c3p0@":http://www.mchange.com/projects/c3p0/ is used as the connection pooling library (instead of @boneCP@ in uApprove 2.3). The reason was, that some deployers reported connection repairing issues with remote databases. @c3p0@ offers also an easier deployment, because this library is used by the IdP as well. Please assure following upgrade steps:
** Adjust the @PrivacyLens.dataSource@ bean in @$IDP_HOME$/conf/PrivacyLens.xml@ (i.e., replace the @bonecp.BoneCPDataSource@ with the @c3p0.ComboPooledDataSource@, see "(file)$PLENS_INSTALL$/manual/configuration/PrivacyLens.xml":configuration/PrivacyLens.xml). Please refer to "JDBC Connection Pool Tuning":#JDBCConnectionPoolTuning for advanced configuration properties.

h2. 3.3 Upgrade from uApprove 2.4 to 2.5

uApprove version 2.5 mainly introduces support for interfederation, besides some fixes and other minor features.
You should upgrade to uApprove 2.5 in case you participate in interfederation. If you don't participate in
interfederation, you are not required to do the upgrade, but the upgrade is still recommended.

In version 2.5, the web templates (JSP files, CSS files, images) have been adapted to support the legal requirements of interfederation
(see "Legal Templates for SWITCHaai":http://www.switch.ch/aai/support/documents/legaltemplates.html).
This means that you also need to update the web application files in @$IDP_INSTALL$/src/main/webapp/PrivacyLens@.
Because the text translations are contained in the library file, keeping the old web application files would
mean that some texts are not shown anymore. In case you have customized the old web application files
of uApprove, you should install the new web application files and re-apply your customizations.

The upgrade procedure is:

* @rm $IDP_INSTALL$/lib/uApprove-#old-version#.jar@
* @cp $PLENS_INSTALL$/lib/PrivacyLens-#new-version#.jar $IDP_INSTALL$/lib@

Optionally update the JDBC dependencies:

* @cp $PLENS_INSTALL$/lib/jdbc/*.jar $IDP_INSTALL$/lib@

Optionally update the JDBC connector for your database. You might use one of the provided MySQL or HSQL JDBC connector:

* @cp $PLENS_INSTALL$/lib/jdbc/optional/#jdbc-connector#.jar $IDP_INSTALL$/lib@<br /><br />Verify that only one version of each library is present in @$IDP_INSTALL$/lib@.

Update the web application files in @$IDP_INSTALL$/src/main/webapp/PrivacyLens@. If you have done any customizations
of these files, do a backup of the old files first, and then re-apply the customizations after having updated
these files

* Optionally backup the existing web application files in @$IDP_INSTALL$/src/main/webapp/PrivacyLens@
* @rm $IDP_INSTALL$/src/main/webapp/uApprove/*@
* @cp $PLENS_INSTALL$/webapp/* $IDP_INSTALL$/src/main/webapp/PrivacyLens@
* Optionally re-apply customizations.
** At least, you should restore your organization's logo (file @$IDP_INSTALL$/src/main/webapp/PrivacyLens/logo.png@), since a placeholder logo is installed by default. You may also want to put your federation's logo to the file @$IDP_INSTALL$/src/main/webapp/PrivacyLens/federation-logo.png@ (which is an empty placeholder logo by default). _(For the SWITCHaai federation, the logo is available at "http://www.switch.ch/aai/design/images/switchaai-logo.png":http://www.switch.ch/aai/design/images/switchaai-logo.png.)_

In case you want to adapt the text translations, see section "4.4 Localization":#a4.4Localization below.

Adapt some values in @$IDP_HOME$/conf/PrivacyLens.properties$@:

* At @database.url@, append @?autoReconnect=true@ to the JDBC URL (e.g. @database.url = jdbc:mysql://localhost:3306/PrivacyLens?autoReconnect=true@).
* At @ar.attributes.blacklist@, add the attribute @eduPersonTargetedID@.

To finish the upgrade of PrivacyLens the IdP must be re-deployed:

bc. cd $IDP_INSTALL$
./install.sh

You also need to restart your Java web application server (e.g. Tomcat or Jetty).

h1. 4 Advanced Deployment

This sections contains advanced configuration topics.

h2. 4.1 Reset Attribute Release Consent

For providing the feature that a user is able to clear[1] her attribute release consent during the login flow, 
add a checkbox to @$IDP_INSTALL$/src/main/webapp/login.jsp@:

bc. 
<form action="<%=request.getAttribute("actionUrl")%>" method="post">
  ...
  <input id="uApprove.consent-revocation" type="checkbox" name="uApprove.consent-revocation" value="true"/>
  <label for="uApprove.consent-revocation">Clear my attribute release consent</label>
  ...
</form>

h2. 4.2 Storage

h3. File-only

For a simple deployment a file only database can be used. HSQL provides such an option.
Define the according database properties in @PrivacyLens.properties@:

bc. 
database.driver             = org.hsqldb.jdbcDriver
database.url                = jdbc:hsqldb:file:/var/opt/PrivacyLens/hsql.db
database.username           = SA
database.password           = 
 
Initializing the database with the provided schemas:

bc. 
echo "SHUTDOWN;" > /tmp/shutdown
java -jar $HSQLDB_HOME$/lib/sqltool.jar \
  --inlineRC=url=jdbc:hsqldb:file:/var/opt/PrivacyLens/hsql.db,user=SA,password= \
  $PLENS_INSTALL$/manual/storage/terms-of-use-schema.sql /tmp/shutdown
java -jar $HSQLDB_HOME$/lib/sqltool.jar \
  --inlineRC=url=jdbc:hsqldb:file:/var/opt/PrivacyLens/hsql.db,user=SA,password= \
  $PLENS_INSTALL$/manual/storage/attribute-relase-schema.sql /tmp/shutdown
  
  
bq(note). @$HSQLDB_HOME$@ defines the location where the downloaded "HSQL distribution":http://hsqldb.org/ is extracted.

bq(note). Assure that the user running the container (e.g., Jetty) has write permission to the db directory.

h3. Custom SQL Statements

# Copy the provided "(file)$PLENS_INSTALL$/manual/storage/sql-statements.properties":storage/sql-statements.properties to @$IDP_HOME$/conf/PrivacyLens.sql-statements.properties@.
# Adjust @$IDP_HOME$/conf/PrivacyLens.sql-statements.properties@ according your needs.
# Enable your custom @sql-statements.properties@ in @$IDP_HOME$/conf/PrivacyLens.xml@:

bc.. 
    <bean id="PrivacyLens.touModule" class="ch.SWITCH.aai.uApprove.tou.ToUModule" ...>
        <!-- ... -->
        <property name="storage">
            <bean class="ch.SWITCH.aai.uApprove.tou.storage.JDBCStorage" ...
                p:sqlStatements="file:/$IDP_HOME$/conf/PrivacyLens.sql-statements.properties" ... />
        </property>
    </bean>
    
    <!-- ... -->
    
    <bean id="PrivacyLens.attributeReleaseModule" class="ch.SWITCH.aai.uApprove.ar.AttributeReleaseModule" ...>
        <!-- ... -->
        <property name="storage">
            <bean class="ch.SWITCH.aai.uApprove.ar.storage.JDBCStorage" ...
               p:sqlStatements="file:/$IDP_HOME$/conf/PrivacyLens.sql-statements.properties" ... />
        </property>
    </bean>
    
h2. Graceful JDBC Connection Handling

The JDBC storage can be configured to act graceful in case of a tempory database issue (e.g., communication link is not available). Instead throwing exceptions and display the error page, no persistent actions are applied.
This implies that the users, idenpently of former ToU accetances and/or attribute release consents have to accept/consent again (if they already had) or have to do it during the next login (if it was the first time).

N.B. It might make sense to set "checkoutTimeout":http://www.mchange.com/projects/c3p0/#checkoutTimeout to an appropiate low value - so as the user has not bothersome latency.

The settings are defined in @$IDP_HOME$/conf/PrivacyLens.xml@:

bc.. 
    <bean id="PrivacyLens.touModule" class="ch.SWITCH.aai.uApprove.tou.ToUModule" ...>
        <!-- ... -->
        <property name="storage">
            <bean class="ch.SWITCH.aai.uApprove.tou.storage.JDBCStorage" ...
                p:graceful="true" ... />
        </property>
    </bean>
    
    <!-- ... -->
    
    <bean id="PrivacyLens.attributeReleaseModule" class="ch.SWITCH.aai.uApprove.ar.AttributeReleaseModule" ...>
        <!-- ... -->
        <property name="storage">
            <bean class="ch.SWITCH.aai.uApprove.ar.storage.JDBCStorage" ...
               p:graceful="true" ... />
        </property>
    </bean>

h3. JDBC Connection Pool Tuning

Cf. "@c3p0@ configuration":http://www.mchange.com/projects/c3p0/#configuration for further details on configuration options.

The settings are defined in @$IDP_HOME$/conf/PrivacyLens.xml@:

bc. 
    <bean id="PrivacyLens.dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" ...
        ...
        p:idleConnectionTestPeriod="300" ... />
        
N.B. You are free to use another JDBC connection pooling library (e.g., "BoneCP":http://jolbox.com/). Just provide the right data source class name in the bean definition as well the required libraries in the classpath.

h3. NOP Storage

The NOP(No Operation) storage basically retrieves users ToU acceptance and/or attribute release consent without requiring any JDBC storage.
This implies _alwaysRequireToUAcceptance_ and/or _alwaysRequireConsent_.

You might enable NOP(No Operation) storage for the ToU and/or attribute release module in @$IDP_HOME$/conf/PrivacyLens.xml@:

bc. 
    <bean id="PrivacyLens.touModule" ...
        ...
        <property name="storage">
            <bean class="ch.SWITCH.aai.uApprove.tou.storage.NOPStorage" />
        </property>
    </bean>

bc. 
    <bean id="PrivacyLens.attributeReleaseModule" ...
        ...
        <property name="storage">
            <bean class="ch.SWITCH.aai.uApprove.ar.storage.NOPStorage" />
        </property>
    </bean>

h3. Other Storage Implementations

Custom storage implementations might be provided in future. Some ideas are:

* Cookie based Storage: This will remember users consent within a cookie. It could stored for just the session or some defined period (e.g., 10 days).

h2. 4.3 Templates

h3. Custom View Templates

Feel free to customize the JSP(JavaServer Pages), CSS(Cascading Style Sheets) and image files located in @$DP_INSTALL$/src/main/webapp/PrivacyLens/@.
For convienience the JSTL(JavaServer Pages Standard Tag Library) is used, cf. "JSTL reference":http://java.sun.com/products/jsp/jstl/reference/docs/index.html.

h2. 4.4 Localization

h3. Custom Messages

You might adjust/extend the provided resource bundles in "(file)$PLENS_INSTALL$/manual/examples/messages":examples/messages and copy them into the IdPs classpath (e.g., @$IDP_INSTALL$/src/main/webapp/WEB-INF/classes/PrivacyLens/messages@).
Specify your bundles base in @$IDP_HOME$/conf/PrivacyLens.xml@:

bc. 
    <bean id="PrivacyLens.viewHelper" class="ch.SWITCH.aai.uApprove.ViewHelper" ...
        p:messagesBase="PrivacyLens.messages" />

h3. Attribute Names and Descriptions

See "(file)$PLENS_INSTALL$/manual/examples/attribute-descriptions.xml":examples/attribute-descriptions.xml for an example how to configure the localized attribute names and descriptions.

h3. Relying Party Names and Descriptions

Currently only the attribute consuming service descriptors in metadata are supported, to retrieve localized relying party names and descriptions.
For providing such names and descriptions extend the metadata for the SP like:

bc. 
<EntityDescriptor entityID="https://sp.example.org/shibboleth">
    <!-- ... -->
    <SPSSODescriptor>
        <!-- ... -->
        <AttributeConsumingService index="1">
            <ServiceName xml:lang="en">Example SP</ServiceName>
            <!-- Service names in other languages -->
            <ServiceDescription xml:lang="en">Some description of Example SP</ServiceDescription>
            <!-- Service descriptions in other languages -->
        </AttributeConsumingService>
    </SPSSODescriptor>
</EntityDescriptor>

Note:
* The metadata of the SWITCHaai federation contain these information.

h2. 4.5 Strict Comparison

h3. Terms Of Use Content Comparison

In the default configuration, only the ToU version is compared to evaluate if a user accepted the ToU. You might enable that the ToU content is compared too in @$IDP_HOME$/conf/PrivacyLens.xml@: 

bc. <bean id="PrivacyLens.touModule" ... p:compareContent="true" ...

h3. Attribute Value(s) Comparison

In the default configuration, only the attribute ID is compared to evaluate if a user consented attibute release. You might enable that attribute value(s) are compared too in @$IDP_HOME$/conf/PrivacyLens.xml@: 

bc. <bean id="PrivacyLens.attributeReleaseModule" ... p:compareAttributeValues="true" ...


h2. 4.6 Audit Logging

PrivacyLens allows (faciliating the IDP's audit log) to enable audit logging to @$IDP_HOME$/logs/idp-audit.log@.

h3. Enable Terms Of Use Audit Log

You might enable ToU audit log in in @$IDP_HOME$/conf/PrivacyLens.xml@: 

bc. <bean id="PrivacyLens.touModule" ... p:auditLogEnabled="true" ...

Example:

bc. 20120101T010000Z|edu.cmu.ece.PrivacyLens|||tou.acceptance|null|null|null|student1||1.0,5b2ee897c08c79a09cd57e8602d605bf8c52db17de9793677c36b5c78644b2b3,|

h3. Enable Attribute Release Audit Log

You might enable attribute release audit log in in @$IDP_HOME$/conf/PrivacyLens.xml@:

bc. <bean id="PrivacyLens.attributeReleaseModule" ... p:auditLogEnabled="true" ...

Examples:

bc. 
20120101T010000Z|edu.cmu.ece.PrivacyLens||https://sp.example.org/shibboleth|ar.consent|null|null|null|student1||uid,surname,givenName,|
20120101T010000Z|edu.cmu.ece.PrivacyLens||https://sp.example.org/shibboleth|ar.clearConsent|null|null|null|student1|||
20120101T010000Z|edu.cmu.ece.PrivacyLens|||ar.generalConsent|null|null|null|student1|||

h2. 4.7 Attribute In Attribute Requester's Metadata Plugin
XXXstroucki look at this

h3. Installation

The plugin is installed by default with PrivacyLens (@PrivacyLens-#version#.jar@). 

h3. Configuration Attribute In Requester's Metadata Matching Rule

This rule allows the release of an attribute if, via its metadata, the SP indicates a need/desire for the attribute. The attributes are indicated by means of @<AttributeConsumingService>@ elements within the @<SPSSODescriptor>@ element. See SAML metadata for more information.

While this rule does have some minor support for dealing with attribute values within the metadata it is limited and should be considered experimental.
<blockquote class="note">
Please be aware of the following:
* This filter requires the attribute requester's metadata be loaded and available.
* The requester's metadata must have an @<SPSSODescriptor@ role since that is the role that contains the listed attributes.
* This matching function only operates as a value rule and only really makes sense as a permit value rule.
</blockquote>

h4. Define the Namespace

In your attribute filter policy file you'll need to add the namespace declaration for this plugin. To do this:

* Add the attribute @xmlns:ua="http://www.switch.ch/aai/idp/PrivacyLens/mf"@ before the @xmlns:xsi@ attribute on the root @<AttributeFilterPolicyGroup>@ element.
* Add the following at the end of the whitespace delimited list of values for the @xsi:schemaLocation@ attribute: @http://www.switch.ch/aai/idp/PrivacyLens/mf classpath:/schema/PrivacyLens-mf.xsd@.

h4. Define the Rule

This rule is defined by the element @<PermitValueRule xsi:type="ua:AttributeInMetadata">@ with the following optional attribute: 

[onlyIfRequired] Boolean flag indicated that only those attributes which are marked as required should be released, those marked as optional will not be. Default value: @true@.

Example Permit Value Rule using the AttributeInMetadata Match Function: 

bc. <PermitValueRule xsi:type="ua:AttributeInMetadata" onlyIfRequired="false">

h2. 4.8 Other

Other topics will be added upon request. Some candidates are:

* Black/Whitelisting
** Different Lists for Terms Of Use and Attribute Release Module
** Specific authContextClassRef required

h1. 5 Troubleshooting

* Check @$IDP_HOME$/logs/idp-process.log@ for @ERROR@ or @WARN@ messages.
* Check container standard error/out (e.g., Jetty's @$JETTY_HOME$/logs/`date +%Y_%m_%d`.stderrout.log@) for error messages.

h2. Debugging

Enabling @DEBUG@ or @TRACE@ log level for PrivacyLens in @$IDP_HOME$/conf/logging.xml@:

bc. <logger name="ch.SWITCH.aai.uApprove" level="DEBUG"/>
bc. <logger name="edu.cmu.ece.PrivacyLens" level="DEBUG"/>

h1. 6 Feedback

Send general questions and comments to "privacylens@ece.cmu.edu":mailto:privacylens@ece.cmu.edu. For bug reports, please use our "issue tracking":https://github.com/cmu-cylab-privacylens/PrivacyLens/issues.


fn1. Clear means to delete general consent if it was given as well delete as all attribute release consents for the accessed relying party.

h1. 7 Definitions

{glossary}
