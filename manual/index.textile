
This document contains the uApprove deployment guide.

h1. Installation

h2. Prerequisites

* Shibboleth Identity Provider 2.3.3.
* Database which supports JDBC.

h2. Assumptions

* IDP_HOME
* The Shibboleth Identity Provider is unpacked at @$IDP_INSTALL$@ (e.g., @/opt/shibboleth-identity-provider-#version#@).
* The Shibboleth Identity Provider is installed at @$IDP_HOME$@ (e.g., @/opt/shibboleth-idp@).
* "uApprove":http://www.switch.ch/aai/uApprove is downloaded and unpacked at @$UAPPROVE_INSTALL$@ (e.g., @/tmp/uApprove-#version#@).

h2. Library Installation

* @cp $UAPPROVE_INSTALL$/lib/uApprove-#version#.jar $IDP_INSTALL$/lib@
* @cp $UAPPROVE_INSTALL$/lib/jdbc/*.jar $IDP_INSTALL$/lib@
bq(note). Provide the JDBC driver for your database to the classpath of the IdP. Assure that there is only one version present. You might use the provided MySQL JDBC driver.

* @cp $UAPPROVE_INSTALL$/lib/jdbc/optional/mysql-connector-java-#version#.jar $IDP_INSTALL$/lib@

h2. Configuration Template

* @cp@ (file)"UAPPROVE_INSTALL$/manual/configuration/uApprove.properties":configuration/uApprove.properties @$IDP_HOME$/conf@
* @cp@ (file)"UAPPROVE_INSTALL$/manual/configuration/uApprove.xml":configuration/uApprove.xml @$IDP_HOME$/conf@

h2. Database Preparation

bq(note). The following database parameters are examples.

* Create a database with the name "uApprove".
* Create a database user with the username "uApprove" and password "uApprove".
* Grant @INSERT, SELECT, UPDATE, DELETE@ rights for the user.
* Create the initial table structures using the schemas:
** "(file)$UAPPROVE_INSTALL$/manual/storage/attribute-release-schema.sql":storage/attribute-release-schema.sql.
** "(file)$UAPPROVE_INSTALL$/manual/storage/terms-of-use-schema.sql":storage/terms-of-use-schema.sql.


h1. Basic Deployment

h2. Web Application Deployment Descriptor

Extend the IdP web application deployment descriptor (@$IDP_INSTALL$/src/main/webapp/WEB-INF/web.xml@):

bc.. 

<web-app ...>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>$IDP_HOME$$/conf/internal.xml; $IDP_HOME$/conf/service.xml; $IDP_HOME$/conf/uApprove.xml</param-value>
    </context-param>

    <!-- IdP Listeners, Filters and Servlets -->
    <!-- ...                                 -->
    
    
    <!-- uApprove Filter and Servlets -->
    
    <filter>
        <filter-name>uApprove</filter-name>
        <filter-class>ch.SWITCH.aai.uApprove.Intercepter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>uApprove</filter-name>
        <url-pattern>/profile/*</url-pattern>
        <url-pattern>/Authn/UserPassword</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>uApprove - Terms Of Use</servlet-name>
        <servlet-class>ch.SWITCH.aai.uApprove.tou.ToUServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>uApprove - Terms Of Use</servlet-name>
        <url-pattern>/uApprove/TermsOfUse</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>uApprove - Attribute Release</servlet-name>
        <servlet-class>ch.SWITCH.aai.uApprove.ar.AttributeReleaseServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>uApprove - Attribute Release</servlet-name>
        <url-pattern>/uApprove/AttributeRelease</url-pattern>
    </servlet-mapping>

</web-app>
h2. Custom Configuration

In @$IDP_HOME$/conf/uApprove.xml@ change:

bc. 
<context:property-placeholder location="classpath:/configuration/uApprove.properties" />

to:

bc. 
<context:property-placeholder location="file:$IDP_HOME$/conf/uApprove.properties" />

Customize @$IDP_HOME$/conf/uApprove.properties@ according your database environment and required features. See "inline documentation":configuration/uApprove.properties for configuration options.


h2. Deployment

To activate uApprove the IdP must be re-deployed:

bc. $IDP_INSTALL$/instal.sh


h1. Upgrade

* @rm $IDP_INSTALL$/lib/uApprove-#old-version#.jar@
* @cp $UAPPROVE_INSTALL$/lib/uApprove-#new-version#.jar $IDP_INSTALL$/lib@

Optionally update your the JDBC dependencies:

* @cp $UAPPROVE_INSTALL$/lib/jdbc/*.jar $IDP_INSTALL$/lib@

Optionally update your JDBC driver. You might use the provided MySQL JDBC driver:

* @cp $UAPPROVE_INSTALL$/lib/jdbc/optional/mysql-connector-java-#version#.jar $IDP_INSTALL$/lib@

bq(warning). Verify that the IdP classpath at @$IDP_INSTALL$/lib@ doesn't contain multiple versions of the same library.


To finish the upgrade of uApprove the IdP must be re-deployed:

bc. $IDP_INSTALL$/instal.sh

h1. Advanced Deployment

This sections contains advanced configuration topics.

h2. Reset Attribute Release Consent

Add a checkbox to @$IDP_INSTALL$/src/main/webapp/login.jsp@

bc.. 
<form action="<%=request.getAttribute("actionUrl")%>" method="post">
  ...
  <input id="uApprove.consent-revocation" type="checkbox" name="uApprove.consent-revocation" value="true"/>
  <label for="uApprove.consent-revocation">Clear my attribute release consent</label>
  ...
</form>
h2. Storage

h3. File-only

TODO

h3. Custom SQL Statements

TODO

h3. JDBC Connection Pool Tuning

TODO

h3. Custom Storage

Custom storage implementations might be provided in future. Some ideas are:

* NOP(No Operation) Storage: This basically will retrieve users ToU acceptance and/or attribute release consent without remembering. This implies _alwaysRequireToUAcceptance_ and/or _alwaysRequireConsent_.
* Cookie based Storage: This will remember users consent within a cookie. It could stored for just the session or some defined period (e.g., 10 days).
* In Memory Storage: Already possible with @mem@ HSQLDB. Will store consent as long as the IdP process is alive.

h2. Templates

h3. Custom View Templates

TODO

h2. Localization

h3. Custom Messages

TODO

h3. Attribute Names and Descriptions

See "(file)attribute-descriptions.xml":attribute-descriptions.xml for an example 
how to configure the localized attribute names and descriptions.

h3. Relying Party Names and Descriptions

TODO

h2. Strict Comparison

h3. Terms Of Use Content Comparison

TODO

h3. Attribute Value Comparison

TODO

h2. Service Provider Black/Whitelist

h3. Different Lists for Terms Of Use and Attribute Release Module

TODO


h3. Specific authContextClassRef required

TODO

h2. Attribute In Attribute Requester's Metadata Plugin

h3. Installation

The plugin is installed by default with uApprove (uApprove-#version#.jar). 

h3. Configuration Attribute In Requester's Metadata Matching Rule

This rule allows the release of an attribute if, via its metadata, the SP indicates a need/desire for the attribute. The attributes are indicated by means of @<AttributeConsumingService>@ elements within the @<SPSSODescriptor>@ element. See SAML metadata for more information.

While this rule does have some minor support for dealing with attribute values within the metadata it is limited and should be considered experimental.
<blockquote class="note">
Please be aware of the following:
* This filter requires the attribute requester's metadata be loaded and available.
* The requester's metadata must have an @<SPSSODescriptor@ role since that is the role that contains the listed attributes.
* This matching function only operates as a value rule and only really makes sense as a permit value rule.
</blockquote>

h4. Define the Namespace

In you attribute filter policy file you'll need to add the namespace declaration for this plugin. To do this:

* Add the attribute @xmlns:ua="http://www.switch.ch/aai/idp/uApprove/mf"@ before the @xmlns:xsi@ attribute on the root @<AttributeFilterPolicyGroup>@ element.
* Add the following at the end of the whitespace delimited list of values for the @xsi:schemaLocation@ attribute: @http://www.switch.ch/aai/idp/uApprove/mf classpath:/schema/uApprove-mf.xsd@.

h4. Define the Rule

This rule is defined by the element @<PermitValueRule xsi:type="ua:AttributeInMetadata">@ with the following optional attribute: 

[onlyIfRequired] Boolean flag indicated that only those attributes which are marked as required should be released, those marked as optional will not be. Default value: @true@.

Example Permit Value Rule using the AttributeInMetadata Match Function: 

bc. <PermitValueRule xsi:type="ua:AttributeInMetadata" onlyIfRequired="false">

h2. Other

bq(note). Other topics will be added on request.

