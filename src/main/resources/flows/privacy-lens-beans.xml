<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"


    default-init-method="initialize" default-destroy-method="destroy">
    
    <import resource="../../../conf/intercept/consent-intercept-config.xml" />
    
<!--  Specialization of PlaceholderConfigurerSupport that resolves ${...}
placeholders within bean
definition property values and @Value
annotations against the current Spring Environment and its set of PropertySources.  -->
    <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
        p:placeholderPrefix="%{" p:placeholderSuffix="}" />

    <bean class="net.shibboleth.idp.profile.impl.ProfileActionBeanPostProcessor" />
    <!-- Pre-processes net.shibboleth.utilities.java.support.component.IdentifiableComponent beans
    by setting the bean ID to the bean name.  -->
    <bean class="net.shibboleth.ext.spring.config.IdentifiableBeanPostProcessor" />

    <bean id="AttributeReleaseConsentFunction"
        class="edu.cmu.ece.privacylens.consent.logic.AttributeReleaseConsentFunction" scope="prototype" />

    <bean id="AttributeConsentFlowDescriptorLookupStrategy"
        class="net.shibboleth.idp.consent.logic.impl.FlowDescriptorLookupFunction"
        c:type="#{ T(edu.cmu.ece.privacylens.consent.flow.ar.AttributeReleaseFlowDescriptor) }" />

    <bean id="IsConsentRequiredPredicate"
        class="edu.cmu.ece.privacylens.logic.IsConsentRequiredPredicate" />
        
    <bean id="IsReminderRequiredPredicate"
        class="edu.cmu.ece.privacylens.logic.IsReminderRequiredPredicate" />
        
    <bean id="AttributeReleaseModule" class="edu.cmu.ece.privacylens.ar.AttributeReleaseModule" init-method="initialize"
        p:enabled="%{ar.enabled}" p:auditLogEnabled="false" p:allowGeneralConsent="%{ar.allowGeneralConsent}" p:compareAttributeValues="false">
        <property name="storage">
            <bean class="edu.cmu.ece.privacylens.ar.storage.JDBCStorage" init-method="initialize"
                p:dataSource-ref="DataSource" p:sqlStatements="classpath:/storage/sql-statements.properties" p:graceful="false" />
        </property>
    </bean>
    
    <bean id="DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" depends-on="shibboleth.LoggingService"
        p:driverClass="%{database.driver}" p:jdbcUrl="%{database.url}"
        p:user="%{database.username}" p:password="%{database.password}"
        p:idleConnectionTestPeriod="300" />

    <!-- Predicate used to determine if consent should be obtained for an attribute. -->
    <bean id="AttributePredicate"
        class="net.shibboleth.idp.consent.logic.impl.AttributePredicate"
        p:whitelistedAttributeIds-ref="shibboleth.consent.attribute-release.WhitelistedAttributeIDs"
        p:blacklistedAttributeIds-ref="shibboleth.consent.attribute-release.BlacklistedAttributeIDs"
        p:attributeIdMatchExpression="#{getObject('shibboleth.consent.attribute-release.MatchExpression')}" />

    <!-- Functions to return a storage key consisting of the user identifier. -->

    <bean id="shibboleth.consent.PrincipalConsentStorageKey"
        class="com.google.common.base.Functions" factory-method="compose"
        c:g-ref="shibboleth.PrincipalNameLookup.Subject"
        c:f-ref="shibboleth.ChildLookup.SubjectContext" />
        
    <bean id="shibboleth.consent.AttributeConsentStorageKey"
        class="net.shibboleth.idp.consent.logic.impl.AttributeValueLookupFunction"
        c:userAttributeId="%{idp.consent.userStorageKeyAttribute:uid}" />
        
    <alias name="%{idp.consent.userStorageKey:shibboleth.consent.PrincipalConsentStorageKey}"
        alias="shibboleth.consent.UserStorageKey" />

    <!--
    Function to return a storage key consisting of the user identifier and relying party ID
    joined by a delimiter.
    -->
    <bean id="shibboleth.consent.UserAndRelyingPartyStorageKey"
        class="net.shibboleth.idp.consent.logic.impl.JoinFunction"
        c:functionA-ref="shibboleth.consent.UserStorageKey"
        c:functionB-ref="shibboleth.RelyingPartyIdLookup.Simple" />

    <!--
    Function to return the storage key of the index record containing all storage keys
    of the storage context.
    -->
    <!--
    <bean id="shibboleth.consent.UserStorageIndexKey"
        class="net.shibboleth.idp.consent.logic.JoinFunction"
        c:functionA-ref="shibboleth.consent.UserStorageKey">
        <constructor-arg name="functionB">
            <bean class="com.google.common.base.Functions" factory-method="constant">
                <constructor-arg>
                    <util:constant
                        static-field="edu.cmu.ece.privacylens.consent.flow.storage.AbstractConsentIndexedStorageAction.DEFAULT_STORAGE_INDEX_KEY" />
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>
    -->

    <!-- Serializer for consent records with symbolics support.
    Symbolics is a workaround for mapping attribute ids to numbers
    to reduce the size needed for storage in cookies. -->
    <bean id="shibboleth.consent.ConsentSerializer"
        class="net.shibboleth.idp.consent.storage.impl.ConsentSerializer"
        p:symbolics-ref="shibboleth.consent.AttributeSymbolics" />

    <!-- Action beans -->

    <bean id="InitializeConsentContext"
        class="edu.cmu.ece.privacylens.consent.flow.InitializeConsentContext" scope="prototype" />

    <bean id="InitializeAttributeConsentContext"
        class="edu.cmu.ece.privacylens.consent.flow.ar.InitializeAttributeReleaseContext" scope="prototype" />

    <bean id="PopulateAttributeConsentContext"
        class="edu.cmu.ece.privacylens.consent.flow.ar.PopulateAttributeReleaseContext" scope="prototype"
        p:attributePredicate-ref="AttributePredicate"
        p:attributeIdComparator="#{getObject('shibboleth.consent.attribute-release.AttributeIDComparator') ?: getObject('DefaultAttributeIDComparator') }" />
        
    <bean id="DecorateGeneral"
        class="edu.cmu.ece.privacylens.consent.flow.ar.DecorateGeneral" scope="prototype" />
        
    <bean id="DecorateOther"
        class="edu.cmu.ece.privacylens.consent.flow.ar.DecorateOther" scope="prototype" />

    <bean id="DecorateUserName"
        class="edu.cmu.ece.privacylens.consent.flow.ar.DecorateUserName" scope="prototype" />
        
    <bean id="DecorateAttributes"
        class="edu.cmu.ece.privacylens.consent.flow.ar.DecorateAttributes" scope="prototype" >
        <property name="attributeProcessor">
            <bean class="edu.cmu.ece.privacylens.ar.AttributeProcessor"
                p:entitlementdescription="%{ar.attributes.entitlement.description}"
                p:machinereadable="%{ar.attributes.machinereadable}"
                p:order="%{ar.attributes.order}" />
        </property>
    </bean>
        
    <bean id="DecorateEvents"
        class="edu.cmu.ece.privacylens.consent.flow.ar.DecorateEvents" scope="prototype" />

    <bean id="ToggleBeanService"
        class="edu.cmu.ece.privacylens.ToggleBeanService" scope="prototype" />
        
    <bean id="ReminderAttributeService"
        class="edu.cmu.ece.privacylens.ReminderAttributeService" scope="prototype" />
        
    <bean id="DumpParameters"
        class="edu.cmu.ece.privacylens.DumpParameters" scope="prototype" />
        
    <bean id="ProcessConsentView"
        class="edu.cmu.ece.privacylens.consent.flow.ar.ProcessConsentView" scope="prototype" />
        
    <bean id="ProcessReminderView"
        class="edu.cmu.ece.privacylens.consent.flow.ar.ProcessReminderView" scope="prototype" />
        
    <bean id="ProcessAdminView"
        class="edu.cmu.ece.privacylens.consent.flow.ar.ProcessAdminView" scope="prototype" />
        
    <bean id="ProcessLoginEventView"
        class="edu.cmu.ece.privacylens.consent.flow.ar.ProcessLoginEventView" scope="prototype" />
        
    <bean id="ProcessServiceView"
        class="edu.cmu.ece.privacylens.consent.flow.ar.ProcessServiceView" scope="prototype" />
        
    <bean id="CheckAdminInterface"
        class="edu.cmu.ece.privacylens.consent.flow.ar.CheckAdminInterface" scope="prototype" />
        
    <bean id="StoreConsent" class="edu.cmu.ece.privacylens.consent.flow.ar.StoreConsent" scope="prototype" />

<!-- profile-intercept-system.xml refers to shibboleth consent context in ConsentAuditContext lookup
    <bean id="PopulatePreConsentAuditContext"
        class="net.shibboleth.idp.profile.audit.impl.PopulateAuditContext" scope="prototype"
        p:auditContextCreationStrategy-ref="shibboleth.consent.ChildLookup.ConsentAuditContext"
        p:fieldExtractors-ref="shibboleth.consent.PreConsentAuditExtractors"
        p:formattingMap-ref="shibboleth.consent.attribute-release.AuditFormattingMap" />
-->

    <bean id="PopulateConsentContext"
        class="edu.cmu.ece.privacylens.consent.flow.PopulateConsentContext" scope="prototype"
        c:currentConsentsFunction-ref="AttributeReleaseConsentFunction"  />

    <bean id="FallbackLanguages" parent="shibboleth.CommaDelimStringArray" c:_0="#{'%{idp.ui.fallbackLanguages:}'.trim()}" />

<!--  relying party ui information - is this what our oracle did before? -->
    <bean id="SetRPUIInformation"
            class="net.shibboleth.idp.ui.impl.SetRPUIInformation" scope="prototype"
            p:httpServletRequest-ref="shibboleth.HttpServletRequest"
            p:fallbackLanguages-ref="FallbackLanguages"/>

    <bean id="RevokeConsent"
        class="edu.cmu.ece.privacylens.consent.flow.storage.RevokeConsent" scope="prototype"
        p:storageKeyLookupStrategy-ref="shibboleth.consent.UserAndRelyingPartyStorageKey"
        p:storageIndexKeyLookupStrategy-ref="shibboleth.consent.UserStorageIndexKey" />

    <bean id="RevokeGlobalAttributeConsent"
        class="edu.cmu.ece.privacylens.consent.flow.storage.RevokeConsent" scope="prototype"
        p:storageKeyLookupStrategy-ref="shibboleth.consent.UserStorageKey"
        p:storageIndexKeyLookupStrategy-ref="shibboleth.consent.UserStorageIndexKey" />

    <bean id="ReadConsentFromStorage"
        class="edu.cmu.ece.privacylens.consent.flow.storage.ReadConsentFromStorage" scope="prototype"
        p:storageKeyLookupStrategy-ref="shibboleth.consent.UserAndRelyingPartyStorageKey"
        p:storageSerializer-ref="shibboleth.consent.ConsentSerializer" />

    <bean id="ReadGlobalAttributeConsentFromStorage"
        class="edu.cmu.ece.privacylens.consent.flow.storage.ReadConsentFromStorage" scope="prototype"
        p:storageKeyLookupStrategy-ref="shibboleth.consent.UserStorageKey" />

    <bean id="PopulateConsentAuditContext"
        class="net.shibboleth.idp.profile.audit.impl.PopulateAuditContext" scope="prototype"
        p:auditContextCreationStrategy-ref="shibboleth.consent.ChildLookup.ConsentAuditContext"
        p:fieldExtractors-ref="shibboleth.consent.ConsentAuditExtractors"
        p:formattingMap-ref="shibboleth.consent.attribute-release.AuditFormattingMap" />

    <bean id="ExtractConsent"
        class="edu.cmu.ece.privacylens.consent.flow.ExtractConsent" scope="prototype"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest" />

    <bean id="CreateResult"
        class="edu.cmu.ece.privacylens.consent.flow.storage.CreateResult" scope="prototype"
        p:storageKeyLookupStrategy-ref="shibboleth.consent.UserAndRelyingPartyStorageKey" 
        p:storageIndexKeyLookupStrategy-ref="shibboleth.consent.UserStorageIndexKey"
        p:storageSerializer-ref="shibboleth.consent.ConsentSerializer" />

    <bean id="CreateGlobalConsentResult"
        class="edu.cmu.ece.privacylens.consent.flow.storage.CreateGlobalConsentResult" scope="prototype" 
        p:storageKeyLookupStrategy-ref="shibboleth.consent.UserStorageKey"
        p:storageIndexKeyLookupStrategy-ref="shibboleth.consent.UserStorageIndexKey" />

    <bean id="ReleaseAttributes"
        class="edu.cmu.ece.privacylens.consent.flow.ar.ReleaseAttributes" scope="prototype" />

    <bean id="WriteAttributeReleaseConsentAuditLog"
        class="net.shibboleth.idp.profile.audit.impl.WriteAuditLog" scope="prototype"
        p:auditContextLookupStrategy-ref="shibboleth.consent.ChildLookup.ConsentAuditContext"
        p:formattingMap-ref="shibboleth.consent.attribute-release.AuditFormattingMap"
        p:httpServletRequest-ref="shibboleth.HttpServletRequest" />

</beans>
